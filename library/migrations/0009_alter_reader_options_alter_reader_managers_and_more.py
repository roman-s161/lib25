# Generated by Django 5.1.6 on 2025-03-02 18:40

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('library', '0008_alter_reader_books_read'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='reader',
            options={'permissions': [('can_lend_books', 'Can lend books to readers'), ('can_view_all_readers', 'Can view all readers')], 'verbose_name': 'Читатель', 'verbose_name_plural': 'Читатели'},
        ),
        migrations.AlterModelManagers(
            name='reader',
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='reader',
            name='address',
            field=models.TextField(blank=True, verbose_name='Адрес проживания'),
        ),
        migrations.AddField(
            model_name='reader',
            name='date_joined',
            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined'),
        ),
        migrations.AddField(
            model_name='reader',
            name='first_name',
            field=models.CharField(blank=True, max_length=150, verbose_name='first name'),
        ),
        migrations.AddField(
            model_name='reader',
            name='groups',
            field=models.ManyToManyField(blank=True, related_name='reader_set', related_query_name='reader', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='reader',
            name='is_active',
            field=models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active'),
        ),
        migrations.AddField(
            model_name='reader',
            name='is_staff',
            field=models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status'),
        ),
        migrations.AddField(
            model_name='reader',
            name='is_superuser',
            field=models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status'),
        ),
        migrations.AddField(
            model_name='reader',
            name='last_login',
            field=models.DateTimeField(blank=True, null=True, verbose_name='last login'),
        ),
        migrations.AddField(
            model_name='reader',
            name='last_name',
            field=models.CharField(blank=True, max_length=150, verbose_name='last name'),
        ),
        migrations.AddField(
            model_name='reader',
            name='library_card_number',
            field=models.CharField(default='LIB-1D0D6C02', max_length=50, unique=True, verbose_name='Номер читательского билета'),
        ),
        migrations.AddField(
            model_name='reader',
            name='password',
            field=models.CharField(default='defaultpassword', max_length=128, verbose_name='Password'),
        ),
        migrations.AddField(
            model_name='reader',
            name='phone',
            field=models.CharField(blank=True, max_length=20, verbose_name='Телефон'),
        ),
        migrations.AddField(
            model_name='reader',
            name='profile_photo',
            field=models.ImageField(blank=True, null=True, upload_to='profile_photos/', verbose_name='Фото профиля'),
        ),
        migrations.AddField(
            model_name='reader',
            name='role',
            field=models.CharField(choices=[('reader', 'Читатель'), ('librarian', 'Библиотекарь'), ('admin', 'Администратор')], default='reader', max_length=20),
        ),
        migrations.AddField(
            model_name='reader',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, related_name='reader_set', related_query_name='reader', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='reader',
            name='username',
            field=models.CharField(default='user', max_length=150, unique=True, verbose_name='Username'),
        ),
        migrations.CreateModel(
            name='BookLending',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('borrowed_date', models.DateField(verbose_name='Дата выдачи')),
                ('return_due_date', models.DateField(verbose_name='Дата возврата')),
                ('returned_date', models.DateField(blank=True, null=True, verbose_name='Фактическая дата возврата')),
                ('status', models.CharField(choices=[('reading', 'Читает'), ('returned', 'Возвращена'), ('overdue', 'Просрочена')], max_length=20)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.book')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='book_lendings', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
